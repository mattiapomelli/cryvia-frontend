/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../common'

export interface QuizInterface extends utils.Interface {
  functions: {
    'createQuiz(uint256,uint256)': FunctionFragment
    'isSubscribed(uint256,address)': FunctionFragment
    'owner()': FunctionFragment
    'ownerBalance()': FunctionFragment
    'platformFee()': FunctionFragment
    'quizFund(uint256)': FunctionFragment
    'quizPrice(uint256)': FunctionFragment
    'redeem(uint256)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'subscribe(uint256)': FunctionFragment
    'token()': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'updateWinBalance(uint256,address[])': FunctionFragment
    'winBalance(uint256,address)': FunctionFragment
    'withdraw()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'createQuiz'
      | 'isSubscribed'
      | 'owner'
      | 'ownerBalance'
      | 'platformFee'
      | 'quizFund'
      | 'quizPrice'
      | 'redeem'
      | 'renounceOwnership'
      | 'subscribe'
      | 'token'
      | 'transferOwnership'
      | 'updateWinBalance'
      | 'winBalance'
      | 'withdraw',
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'createQuiz',
    values: [BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'isSubscribed',
    values: [BigNumberish, string],
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'ownerBalance',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'platformFee',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'quizFund',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'quizPrice',
    values: [BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'redeem', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'subscribe',
    values: [BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'token', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: 'updateWinBalance',
    values: [BigNumberish, string[]],
  ): string
  encodeFunctionData(
    functionFragment: 'winBalance',
    values: [BigNumberish, string],
  ): string
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string

  decodeFunctionResult(functionFragment: 'createQuiz', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'isSubscribed',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'ownerBalance',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'platformFee', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'quizFund', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'quizPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'subscribe', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateWinBalance',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'winBalance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'OwnershipTransferred(address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>

export interface Quiz extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: QuizInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    createQuiz(
      _id: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    isSubscribed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    owner(overrides?: CallOverrides): Promise<[string]>

    ownerBalance(overrides?: CallOverrides): Promise<[BigNumber]>

    platformFee(overrides?: CallOverrides): Promise<[BigNumber]>

    quizFund(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    quizPrice(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    redeem(
      _quizId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    subscribe(
      _quizId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    token(overrides?: CallOverrides): Promise<[string]>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    updateWinBalance(
      _quizId: BigNumberish,
      _winners: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    winBalance(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>
  }

  createQuiz(
    _id: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  isSubscribed(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides,
  ): Promise<boolean>

  owner(overrides?: CallOverrides): Promise<string>

  ownerBalance(overrides?: CallOverrides): Promise<BigNumber>

  platformFee(overrides?: CallOverrides): Promise<BigNumber>

  quizFund(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  quizPrice(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  redeem(
    _quizId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  subscribe(
    _quizId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  token(overrides?: CallOverrides): Promise<string>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  updateWinBalance(
    _quizId: BigNumberish,
    _winners: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  winBalance(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    createQuiz(
      _id: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    isSubscribed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<boolean>

    owner(overrides?: CallOverrides): Promise<string>

    ownerBalance(overrides?: CallOverrides): Promise<BigNumber>

    platformFee(overrides?: CallOverrides): Promise<BigNumber>

    quizFund(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    quizPrice(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    redeem(_quizId: BigNumberish, overrides?: CallOverrides): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    subscribe(_quizId: BigNumberish, overrides?: CallOverrides): Promise<void>

    token(overrides?: CallOverrides): Promise<string>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>

    updateWinBalance(
      _quizId: BigNumberish,
      _winners: string[],
      overrides?: CallOverrides,
    ): Promise<void>

    winBalance(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    withdraw(overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter
  }

  estimateGas: {
    createQuiz(
      _id: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    isSubscribed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    ownerBalance(overrides?: CallOverrides): Promise<BigNumber>

    platformFee(overrides?: CallOverrides): Promise<BigNumber>

    quizFund(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    quizPrice(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    redeem(
      _quizId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    subscribe(
      _quizId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    updateWinBalance(
      _quizId: BigNumberish,
      _winners: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    winBalance(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    createQuiz(
      _id: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    isSubscribed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ownerBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>

    platformFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    quizFund(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    quizPrice(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    redeem(
      _quizId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    subscribe(
      _quizId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    updateWinBalance(
      _quizId: BigNumberish,
      _winners: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    winBalance(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>
  }
}
